{"version":3,"sources":["ShowReport.js","App.js","serviceWorker.js","index.js"],"names":["ShowReport","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isClick","_this2","react_default","a","createElement","App_App","temp","className","style","textAlign","color","name","Math","round","sunR","sunS","class","onClick","setState","Component","App","findWeather","city","getTemp","isFill","changeTime1","unix","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","changeTime","bind","assertThisInitialized","fetch","process","then","res","json","data","main","sys","sunrise","sunset","catch","error","console","log","_this3","ShowReport_ShowReport","onSubmit","type","id","placeholder","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b59af698.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport App from './App';\r\n\r\nexport default class ShowReport extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isClick: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isClick) {\r\n      return <App />;\r\n    } else if (this.props.temp < 20 + 273) {\r\n      return (\r\n        <div className='showRCO'>\r\n          <div className='cl1SRCO'>\r\n            <div className='cl2SRCO' style={{}}>\r\n              <div style={{ textAlign: 'center', color: '#2B2B52' }}>\r\n                <h3>{this.props.name}</h3>\r\n                <h3>{Math.round(this.props.temp - 273)} &#8451;</h3>\r\n                <h3>SunRise - {this.props.sunR} AM</h3>\r\n                <h3>SunSet - {this.props.sunS} PM</h3>\r\n              </div>\r\n              <button\r\n                class='btn-grad'\r\n                onClick={() => {\r\n                  this.setState({ isClick: true });\r\n                }}\r\n              >\r\n                BACK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.temp >= 20 + 273 && this.props.temp <= 40 + 273) {\r\n      return (\r\n        <div className='showRC'>\r\n          <div className='cl1SRC'>\r\n            <div className='cl2SRC' style={{}}>\r\n              <div style={{ textAlign: 'center', color: '#2B2B52' }}>\r\n                <h3>{this.props.name}</h3>\r\n                <h3>{Math.round(this.props.temp - 273)} &#8451;</h3>\r\n                <h3>SunRise - {this.props.sunR} AM</h3>\r\n                <h3>SunSet - {this.props.sunS} PM</h3>\r\n              </div>\r\n              <button\r\n                class='btn-grad'\r\n                onClick={() => {\r\n                  this.setState({ isClick: true });\r\n                }}\r\n              >\r\n                BACK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='showR'>\r\n          <div className='cl1SR'>\r\n            <div className='cl2SR' style={{}}>\r\n              <div style={{ textAlign: 'center', color: '#2B2B52' }}>\r\n                <h3>{this.props.name}</h3>\r\n                <h3>{Math.round(this.props.temp - 273)} &#8451;</h3>\r\n                <h3>SunRise - {this.props.sunR} AM</h3>\r\n                <h3>SunSet - {this.props.sunS} PM</h3>\r\n              </div>\r\n              <button\r\n                class='btn-grad'\r\n                onClick={() => {\r\n                  this.setState({ isClick: true });\r\n                }}\r\n              >\r\n                BACK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport ShowReport from './ShowReport';\r\nvar defaulturl1 = 'http://api.openweathermap.org/data/2.5/weather?q=';\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isFill: false,\r\n      city: '',\r\n      temp: '',\r\n      name: '',\r\n      sunR: '',\r\n      sunS: ''\r\n    };\r\n    this.getTemp = this.getTemp.bind(this);\r\n  }\r\n  //for serach via city\r\n  findWeather = () => {\r\n    if (this.state.city !== '') {\r\n      this.getTemp();\r\n      this.setState({ isFill: true });\r\n    }\r\n  };\r\n\r\n  //for search via city name\r\n  getTemp() {\r\n    fetch(defaulturl1 + this.state.city + process.env.REACT_APP_KEY)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        // console.log(data);\r\n        this.setState({ temp: data.main.temp });\r\n        this.setState({ name: data.name });\r\n        this.setState({ sunR: data.sys.sunrise });\r\n        this.setState({ sunS: data.sys.sunset });\r\n        this.changeTime(this.state.sunR);\r\n        this.changeTime1(this.state.sunS);\r\n        //console.log(this.state);\r\n      })\r\n      .catch(error => console.log('THere was a problem in fetching data'));\r\n  }\r\n  //to convert unix time to local time for SunSet Time\r\n  changeTime1 = unix => {\r\n    var date = new Date(unix * 1000);\r\n    var hours = date.getHours();\r\n    var minutes = '0' + date.getMinutes();\r\n    var seconds = '0' + date.getSeconds();\r\n    var formattedTime =\r\n      hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    this.setState({ sunS: formattedTime });\r\n  };\r\n\r\n  //to convert unix time to local time for SunRise Time\r\n  changeTime = unix => {\r\n    var date = new Date(unix * 1000);\r\n    var hours = date.getHours();\r\n    var minutes = '0' + date.getMinutes();\r\n    var seconds = '0' + date.getSeconds();\r\n    var formattedTime =\r\n      hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    this.setState({ sunR: formattedTime });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isFill) {\r\n      return (\r\n        <ShowReport\r\n          name={this.state.name}\r\n          temp={this.state.temp}\r\n          sunR={this.state.sunR}\r\n          sunS={this.state.sunS}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <nav className='navbar navbar-dark bg-dark mynav'>\r\n          <h3 className='test mx-auto'>Weather Forecast</h3>\r\n        </nav>\r\n        <div className='cl1'>\r\n          <div className='cl2'>\r\n            <form onSubmit={this.findWeather}>\r\n              <input\r\n                type='text'\r\n                id='ip1'\r\n                placeholder='Enter City Name'\r\n                value={this.state.value}\r\n                onChange={e => this.setState({ city: e.target.value })}\r\n              />\r\n              {/* <input type='text' id='ip2' /> */}\r\n              {/* jjjj */}\r\n              <button className='btn-grad' type='submit'>\r\n                Get Weather\r\n              </button>\r\n              {/* ,,,, */}\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}